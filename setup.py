#!/usr/bin/env python3
"""
Script de setup automatizado para o ReactAI
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

def run_command(command, cwd=None, shell=True):
    """Executa um comando e retorna o resultado"""
    try:
        result = subprocess.run(command, cwd=cwd, shell=shell, capture_output=True, text=True)
        if result.returncode != 0:
            print(f"‚ùå Erro ao executar: {command}")
            print(f"Erro: {result.stderr}")
            return False
        return True
    except Exception as e:
        print(f"‚ùå Erro ao executar: {command}")
        print(f"Exce√ß√£o: {e}")
        return False

def check_requirements():
    """Verifica se os pr√©-requisitos est√£o instalados"""
    print("üîç Verificando pr√©-requisitos...")
    
    # Verificar Python
    python_version = sys.version_info
    if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        return False
    print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    # Verificar Node.js
    if not run_command("node --version", shell=True):
        print("‚ùå Node.js √© necess√°rio")
        return False
    
    # Verificar npm
    if not run_command("npm --version", shell=True):
        print("‚ùå npm √© necess√°rio")
        return False
    
    # Verificar PostgreSQL
    if not run_command("psql --version", shell=True):
        print("‚ö†Ô∏è  PostgreSQL n√£o encontrado. Certifique-se de que est√° instalado.")
    
    print("‚úÖ Pr√©-requisitos verificados")
    return True

def setup_backend():
    """Configura o backend"""
    print("\nüîß Configurando backend...")
    
    backend_dir = Path("backend")
    if not backend_dir.exists():
        print("‚ùå Diret√≥rio backend n√£o encontrado")
        return False
    
    # Instalar depend√™ncias Python
    print("üì¶ Instalando depend√™ncias Python...")
    if not run_command("pip install -r requirements.txt", cwd=backend_dir):
        return False
    
    # Criar arquivo .env se n√£o existir
    env_file = backend_dir / ".env"
    env_example = backend_dir / "env.example"
    
    if not env_file.exists() and env_example.exists():
        print("üìù Criando arquivo .env...")
        run_command(f"cp env.example .env", cwd=backend_dir)
        print("‚ö†Ô∏è  Configure as vari√°veis de ambiente no arquivo .env")
    
    print("‚úÖ Backend configurado")
    return True

def setup_frontend():
    """Configura o frontend"""
    print("\nüé® Configurando frontend...")
    
    frontend_dir = Path("frontend")
    if not frontend_dir.exists():
        print("‚ùå Diret√≥rio frontend n√£o encontrado")
        return False
    
    # Instalar depend√™ncias Node.js
    print("üì¶ Instalando depend√™ncias Node.js...")
    if not run_command("npm install", cwd=frontend_dir):
        return False
    
    print("‚úÖ Frontend configurado")
    return True

def create_database():
    """Cria o banco de dados"""
    print("\nüóÑÔ∏è  Configurando banco de dados...")
    
    # Tentar criar banco de dados
    if run_command("createdb reactai_db", shell=True):
        print("‚úÖ Banco de dados criado")
    else:
        print("‚ö†Ô∏è  N√£o foi poss√≠vel criar o banco de dados automaticamente")
        print("   Execute manualmente: createdb reactai_db")
    
    return True

def main():
    """Fun√ß√£o principal"""
    print("üöÄ ReactAI - Setup Automatizado")
    print("=" * 50)
    
    # Verificar se estamos no diret√≥rio correto
    if not Path("README.md").exists():
        print("‚ùå Execute este script no diret√≥rio raiz do projeto")
        return
    
    # Verificar pr√©-requisitos
    if not check_requirements():
        print("\n‚ùå Setup falhou. Verifique os pr√©-requisitos.")
        return
    
    # Setup backend
    if not setup_backend():
        print("\n‚ùå Setup do backend falhou.")
        return
    
    # Setup frontend
    if not setup_frontend():
        print("\n‚ùå Setup do frontend falhou.")
        return
    
    # Setup banco de dados
    create_database()
    
    print("\n" + "=" * 50)
    print("‚úÖ Setup conclu√≠do com sucesso!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. Configure as vari√°veis de ambiente em backend/.env")
    print("2. Inicie o backend: cd backend && uvicorn app.main:app --reload")
    print("3. Inicie o frontend: cd frontend && npm start")
    print("4. Acesse: http://localhost:3000")
    print("\nüìö Documenta√ß√£o: http://localhost:8000/docs")

if __name__ == "__main__":
    main()
